〜はまったところ〜
☆lambdaからboto3を使ってServiceCatalogのsearch_productsを叩くとポリシーのエラーが出る。
->単純にポリシーがアタッチされていないと考える
->lambdaを作ったときに自動で作成されるロールにAWRServiceCatalogAdminFullAccessというポリシーがアタッチされていないことで、ServiceCatalogにアクセス出来なかったことが問題。

・以下行った作業
1.masterコンソール
2.IAM->ロール
3.作成したlambdaのロール
4.「ポリシーをアタッチします」
5.「servicecatalog」と検索欄に入力
6.「AWSServiceCatalogAdminFullAccess」をアタッチ



☆lambdaからboto3を使ってServiceCatalogのsearch_productsを叩いても戻り値が空っぽのものしか返らない。awscliからsearch_productsを叩くとできるのに。
->ドキュメントに戻って見直してみる
->boto3にはsearch_products_as_adminというものがあるのでそちらを叩くようにすると解決する。



☆アカウントの払い出しでboto3からaccount factoryに対して、provision_productを叩くときに、pathIdというものが必要になるが、正しい値を指定してもエラーが出てしまうのでboto3のバグな気がする。
->根拠としてはawscliで同じコマンドを叩くとうまく行ったので、boto3のバグを踏んだ可能性が大きい。解決策としてpythonのsubprocessで直接awscliを叩く方針で行こうと思う。
->lambda上でawscliを実行するにはzipにawscliの実体を丸ごとまとめてs3にアップロード後、lambdaからzipを読み込む必要があったので、以下を参考に行った。
http://blog.serverworks.co.jp/tech/2019/04/11/lambda-aws-cli/



☆awscliをlambda上で実行するために、./awsを実行するsubprocessをlambdaで書いたが、パーミッションエラーで実行できない。
->「ls -l」を叩いてパーミッションをみると「x」がなくて実行権限がなかったのでパーミッションを変更することを考える
->Windowsを使っていることからローカルではchmodを叩けないので、subprocessでchmodを叩く行をlambdaに記述して、lambda(Amazon Linux2)でchmod を./awsファイルに対して行うことで実行権限を与えようとしたが、パーミッションエラーが取れなかったので、さらにsubprocessでchmod実行後に「ls -l」でデバッグをしたら「x」が反映されていなかった。
->Windowsでファイルシステムをマウントしたものをzipにまとめてs3に送り、lambda(Amazon Linux2)上で実行させてしまっているから、ファイルシステムがNTFSになってることからlambda(Amazon Linux)上でchmodを叩いても変更されない。
->virtual boxを使って、以下のURLをやり直すことで、解決。
http://blog.serverworks.co.jp/tech/2019/04/11/lambda-aws-cli/

・以下行った作業
1.s3バケットを作る
2.以下のURLをLinux上で行う(windowsから行ってしまうとパーミッションを変更できない)
http://blog.serverworks.co.jp/tech/2019/04/11/lambda-aws-cli/
cmdの部分を'aws servicecatalog search-products-as-admin'に変更する。
3.以下のコマンドでs3バケットに2で作成したzipをアップロードする
aws s3 cp lambda-cli.zip s3://test-lambda-zip-bucket
4.lambdaにzipの内容を反映する
lambda関数を作成して、作成した後に下にスクロールするとs3からアップロードを選択できる。
「ハンドラ」は「lambda名.関数名」で指定することに注意。
5.lambdaの実行時間の制約を引き延ばす
一分くらいにしておく
6.実行



☆上記のlist-launch-pathをboto3で行ってダメだったからawscliをlambdaで使えるようにやったが、結局コマンドプロンプト上ではできるけど、lambdaになった瞬間launch-pathを取得できなくなってしまう
->コマンドプロンプトでできるのに、lambdaでできるのはおそらくlambdaの権限回りが怪しい
->path-idがよくわかっていなかったので、コマンドラインで「aws servicecatalog list-launch-paths」コマンドでどこで使われているものかを調べたら、「portfolio」という文字があったので、lambdaがポートフォリオにアクセスする権限が無いと仮説を立てる
->ポートフォリオへのアクセス権限をlambdaに渡すことで解決

・行った作業
1.masterからservice catalogへアクセス
2.「ポートフォリオ」をクリック
3.「account factory」をクリック
4.「グループ、ロール、およびユーザー」をクリック
5.「グループ、ロール、またはユーザーの追加」をクリック
6.作成したlambdaの名前を選択してアタッチ
7.以上でlambdaがポートフォリオへアクセスする権限を得た



☆lambda上でaccount factoryを叩けたけど、アカウントの作成に失敗する
->今回に関してはエラーが出てきて「controltower:CreateManagedAccount"」というポリシーが無くて、アカウントを作る事ができないと怒られた。
->以下の58ページに従って、作成したlambda関数のロールに「AWSServiceCatalogEndUserFullAccess」のポリシーをアタッチして、さらにカスタムポリシーを作成して、そのカスタムポリシーを作成したlambda関数のロールにアタッチする。さらに、ドキュメントに書かれていないが、「sso:DescribeRegisteredRegions」の権限もないといわれたので、カスタムポリシーに追記したらうまくいった。
https://docs.aws.amazon.com/ja_jp/controltower/latest/userguide/controltower-ug.pdf



〜方針〜
☆lambda->account factory
実行できるところはboto3で行う。実行できないところはawscliをsubprocessを使って直接叩く。
二つに分ける理由としては、すべてawscliにしてしまうと実行時間がかかってしまうから。なので、boto3を基本的に使って、どうしようもないところをawscliで実行する方式とする。
->今のところboto3だけで済んでいる



〜to do〜
☆通知の制約でsnsの設定をしないとできないのかな？
	・制約というものでIAMロールの設定もできそう。これができるとassume_roleも可能になる
	・https://docs.aws.amazon.com/ja_jp/servicecatalog/latest/adminguide/constraints-notification.html
	
☆SNS->lambda (アカウントを作成した後に状態が変化したらSNS通知が飛んできて2個目のlambdaのトリガーになる)
	・AmazonSNSFullAccessのポリシーをlambdaにアタッチ
	・CloudWatchLogsFullAccessをlambdaにアタッチ
	・provision_productに「Passed to CloudFormation」と書いてあるので、servicecatalogからcloudformationへのアクセスのた		めのポリシーが必要かもしれない。
	・https://dev.classmethod.jp/cloud/aws/run-lambda-via-sns-and-write-log-to-cwl/
	・https://www.wakuwakubank.com/posts/708-aws-lambda-sns/

☆SNSのトピックのarnをプログラムから取得する方法
	・account factoryでSNS通知をさせるには、provision_productの引数にarnが必要だから。

☆lambda->account factory->slack通知
	・slack連携を調べる

☆assume roleでマルチアカウント処理
	・払い出したアカウントIAMロールを取得できないと不可能
	・lambdaはmasterに一つ。もし実行時間が足りなかったらlambdaを多段で行う。
	・account factoryのバージョンが複数あるかもだから、中身のcloudformationを見る。
	
☆codebuild、codepipelineとかを使ってgithubと連携
	・code兄弟の何が必要かはわかっていないので調べる。
	・commitされたyamlをjsonに変換して送れるならapi gatewayだけでもできるかもしれないから調べる。
	・ちなみにapigatewayなどからきたjsonはlambdaのeventに格納される。



〜わかったこと、理解が深まったこと〜
☆「ロール」はlambdaやec2などサービスに作られるもので、このロールに複数のポリシーを適宜アタッチしていくと権限が増やせるというもの。また、「ユーザ」にポリシーをアタッチしたり、グループという概念も入ってくる。
https://www.wakuwakubank.com/posts/476-aws-iam-basic/

☆カスタムポリシーを書いたときのエラーは気にしなくていい。
https://qiita.com/ksilverwall/items/8ef0432a4c5810490de6

☆OUというのは、アカウントを束ねている単位のこと。「OU1」に「アカウントA」と「アカウントB」がアタッチされるように使われる。さらに「OU1」に複数のポリシー(例えばEC2アクセスポリシーとGLUEアクセスポリシーがアタッチされる)がアタッチされて、そのポリシーに「アカウントA」と「アカウントB」を従わせるという一元管理の仕組みを実現している。

☆プログラム(lambda)からservice catalogを叩いてアカウントを作成するために必要なポリシー
・AWSServiceCatalogEndUserFullAccess
・AWSServiceCatalogAdminFullAccess 
・control_tower_custom(自分で作成するポリシー。別途添付)
・AWSLambdaBasicExecutionRole-46c6dc17-c7a1-4768-b64f-a8a6a20061a4(lambdaを作成したときに自動的にできるやつだと思う)
・「servicecatalog->管理者->ポートフォリオ->グループ、ロール、およびユーザー」に作成したlambdaを追加する
https://docs.aws.amazon.com/ja_jp/controltower/latest/userguide/controltower-ug.pdf

☆lambdaの送信先にcloudwatchlogsが選択できない理由
lambdaにcloudwatchlogsへのアクセス権限(ポリシー)がアタッチされていたら自動的にcloudwatchlogsへ書き込まれるようになっている。そのあとにlogを見たい場合はcloudwatchlogsを開いて「ログ」をクリックするとロググループが表示されるから、そこでログを確認するようにする。

〜聞きたいこと〜
・アカウントの作成に20分くらいかかるみたいなので、lambdaの実行時間制限の15分にかかってしまう気がする。
->そのような理由もあってlambdaを多段にしたほうがいいかもしれない。

・アカウントを払い出した後のポリシーの設定はどうするのか？
->アカウントを払い出したばかりのものは、service catalogにもアクセスできないけどどのようにすればアクセスできるの？
->aws organaizationsでアカウントやOUにポリシーをアタッチできたから、カスタムポリシーを作成してアタッチしてみたけどservice catalogにつなぐことができなかった。

・account factoryで作られたアカウントのIAMロールはどうなるのか？どこで取得できるのか？
->払い出されたアカウントのIAMロールが取得できればassume roleを使って、masterから払い出したアカウントにアクセスできる
https://qiita.com/akiray03/items/07e9a786d1cc054f4e22
https://github.com/aws-samples/account-factory/blob/master/AccountCreationLambda.py
https://dev.classmethod.jp/cloud/aws/aws-sdk-for-python-boto3-assumerole/

・baselineはプロビジョニング前のところに配置されるのか？それともプロビジョニング後のところに配置されるのか？
前者の場合は、boto3でprovisio_productを叩く。後者の場合は、boto3でexectuteコマンドを叩いてセルフアクションを行うことになると思うから。



